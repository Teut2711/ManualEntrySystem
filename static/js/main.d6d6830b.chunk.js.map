{"version":3,"sources":["components/Modal.js","components/NavBar.js","components/FormComponents.js","components/Main.js","patientDetails.js","patientTests.js","App.js","reportWebVitals.js","index.js"],"names":["SimpleModal","Modal","trigger","Button","type","icon","header","content","NavBar","useState","activeItem","setActiveItem","handleItemClick","e","name","Menu","style","width","Item","active","onClick","position","Input","placeholder","useGetFields","fieldSpec","modifyName","useFormContext","getValues","register","errors","formState","handleInputChange","Object","values","map","index","props","validation","fieldProps","id","defaultValue","getFieldProps","errorMessage","_","get","message","Form","Group","widths","Field","fluid","control","getControl","onChange","color","toString","PatientDetails","appState","useContext","Context","patient","detailsSpec","TestDetails","testID","testSpec","AddTestButton","setError","unregister","TestContext","counter","setCounter","setTestList","open","setOpen","onOpen","positive","Icon","Header","Message","attached","Content","Actions","state","newlyAddedTestName","ele","slice","includes","shouldFocus","newState","text","Select","createContext","Main","testList","methods","useForm","shouldUnregister","currentTabIndex","setCurrentTabIndex","handleTestDeletion","dict","filterFunc","key","fromEntries","entries","filter","details","menuItem","render","Tab","Pane","allTests","keys","event","menuItems","Grid","Column","value","setValue","Provider","className","method","action","menu","vertical","tabular","panes","activeIndex","onTabChange","required","valueAsNumber","App","patientPackages","setPatientPackages","formview","setFormView","setAppState","columns","divided","Row","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"0QAaeA,MAVf,WACI,OACI,cAACC,EAAA,EAAD,CACIC,QAAS,cAACC,EAAA,EAAD,CAAQC,KAAK,SAASC,KAAK,SACpCC,OAAO,YACPC,QAAQ,oBCwBLC,EA5BA,WACX,MAAoCC,mBAAS,QAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAkB,SAACC,EAAD,OAAMC,EAAN,EAAMA,KAAN,OAAiBH,EAAcG,IACvD,OACI,eAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,QAAtB,UACI,cAACF,EAAA,EAAKG,KAAN,CACIJ,KAAK,OACLK,OAAuB,SAAfT,EACRU,QAASR,IAEb,cAACG,EAAA,EAAKG,KAAN,CACIJ,KAAK,QACLK,OAAuB,UAAfT,EACRU,QAASR,IAGb,eAACG,EAAA,EAAKA,KAAN,CAAWM,SAAS,QAApB,UACI,cAACN,EAAA,EAAKG,KAAN,UACI,cAACI,EAAA,EAAD,CAAOjB,KAAK,SAASkB,YAAY,gBAErC,cAACR,EAAA,EAAKG,KAAN,UACI,cAAC,EAAD,a,qFClBdM,EAAe,SAACC,EAAWC,GAC/B,MAA0EC,cAAlEC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,SAAuBC,EAA1C,EAA6BC,UAAaD,OAAUE,EAApD,EAAoDA,kBAUpD,OAAOC,OAAOC,OAAOT,GAAWU,KAAI,WAAwBC,GAAW,IAAD,EAA/BC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,WACxCC,EATgB,SAACF,GACrB,IAAIE,EAAU,2BAAQF,GAAR,IAAevB,KAAMY,EAAWW,EAAMvB,QAGpD,OAFAyB,EAAWC,GAAKD,EAAWzB,KAC3ByB,EAAWE,aAAeb,EAAUW,EAAWzB,OAASuB,EAAMI,cAAgB,GACvEF,EAKUG,CAAcL,GACzBM,EAAY,UAAGC,IAAEC,IAAIf,EAAQS,EAAWzB,aAA5B,aAAG,EAAgCgC,QACrD,OACE,eAACC,EAAA,EAAKC,MAAN,CAAmCC,OAAO,QAA1C,UACE,cAACF,EAAA,EAAKG,MAAN,qCACEC,OAAK,EACLC,QAASC,EAAWd,EAAWnC,OAC3ByB,EAASU,EAAWzB,KAAZ,eAAuBwB,KAC/BC,GAJN,IAKEe,SAAUtB,KAEXW,GACC,mBAAG3B,MAAQ,CAACuC,MAAM,OAAlB,SAA2BZ,MATdP,EAAMoB,gBA2BdC,EARQ,WACrB,IAAQC,EAAaC,qBAAWC,GAAxBF,SACR,OAAOlC,EACLkC,EAASG,QAAQC,aACjB,SAAAhD,GAAI,wBAAeA,OAOViD,EAAc,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpBN,EAAaC,qBAAWC,GAAxBF,SACR,OAAOlC,EAAakC,EAASG,QAAQI,UAAU,SAAAnD,GAAI,8BAAqBkD,EAArB,YAA+BlD,OAMvEoD,EAAgB,WAC3B,MAA4CvC,cAApCwC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,WAAYxC,EAA9B,EAA8BA,UAC9B,EAA6C+B,qBAAWU,GAAhDC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,WAAYC,EAA7B,EAA6BA,YAC7B,EAAwB/D,oBAAS,GAAjC,mBAAOgE,EAAP,KAAaC,EAAb,KAEMV,EAAM,cAAUM,GAsCtB,OAAO,eAACrE,EAAA,EAAD,CAAO0E,OAAQ,kBAAMD,GAAQ,IAClCD,KAAMA,EACNvE,QACE,eAACC,EAAA,EAAD,CAAQyE,UAAQ,EAACxE,KAAK,SAAtB,qBAEE,+BACE,cAACyE,EAAA,EAAD,CAAM/D,KAAK,qBANZ,UAUL,cAACb,EAAA,EAAM6E,OAAP,UACE,cAACC,EAAA,EAAD,CACEC,UAAQ,EACR1E,OAAO,aACPC,QAAQ,iCAGZ,cAACN,EAAA,EAAMgF,QAAP,UACE,cAAC,EAAD,CAAajB,OAAQA,MAEvB,eAAC/D,EAAA,EAAMiF,QAAP,WACE,cAAC/E,EAAA,EAAD,CAEEoD,MAAM,QACNnD,KAAK,SACLgB,QA5D2B,WAE/BoD,GAAY,SAAAW,GAEV,IAAIC,EAAqBxD,EAAU,iBAAD,OAAkBoC,EAAlB,UAClC,GAAI/B,OAAOC,OAAON,EAAU,kBAAkBO,KAAI,SAAAkD,GAAG,OAAIA,EAAIvE,QAAMwE,MAAM,GAAI,GAAGC,SAASH,GAQvF,OANAjB,EAAS,iBAAD,OACWH,EADX,SAEN,CAAE5D,KAAM,sBAAuB0C,QAAS,sCACxC,CAAE0C,aAAa,IAGVL,EAET,IAAIM,EAAQ,2BACPN,GADO,kBACCnB,EAAS,CAAE0B,KAAM9D,EAAU,iBAAD,OAAkBoC,EAAlB,aAMvC,OAFAO,GAAW,SAAAY,GAAK,OAAIA,EAAQ,KAC5BT,GAAQ,GACDe,MAkCP,eACO,GAOP,cAACtF,EAAA,EAAD,CAEEoD,MAAM,QACNnD,KAAK,SACLgB,QAvC2B,WAC/BgD,EAAW,iBAAD,OAAkBJ,IAC5BU,GAAQ,IAiCN,mBACO,UAcPrB,EAAa,SAACjD,GAClB,OAAQA,GACN,IAAK,SACH,OAAOuF,IACT,QACE,OAAOrE,M,kBC/IA+C,EAAcuB,0BAmFZC,EAjFF,WACX,MAAgCpF,mBAAS,IAAzC,mBAAOqF,EAAP,KAAiBtB,EAAjB,KACMuB,EAAUC,YAAQ,CAAEC,kBAAkB,IAC5C,EAA8BxF,mBAAS,GAAvC,mBAAO6D,EAAP,KAAgBC,EAAhB,KACA,EAA8C9D,mBAAS,GAAvD,mBAAOyF,EAAP,KAAwBC,EAAxB,KAMMC,EAAqB,SAACvF,EAAGmD,GAK7BQ,GAAY,SAAAW,GAAK,OAJGkB,EAIYlB,EAJNmB,EAIa,mCAAEC,EAAF,iBAAgBA,IAAQvC,GAJtB/B,OAAOuE,YAC9CvE,OAAOwE,QAAQJ,GAAMK,OAAOJ,IADX,IAACD,EAAMC,KAM1BP,EAAQ3B,WAAR,wBAAoCJ,IACpCmC,EAAmB,IAQfQ,EAAU,CACdC,SAAU,kBACVC,OAAQ,kBAAM,eAACC,EAAA,EAAIC,KAAL,WACZ,cAAChC,EAAA,EAAD,CACEC,UAAQ,EACR1E,OAAO,kBACPC,QAAQ,kCAGV,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAACJ,EAAA,EAAD,CAAQoD,MAAM,SAASnD,KAAK,SAA5B,sBAT4B,qBAc1B4G,EAAW/E,OAAOgF,KAAKnB,GAAU3D,KAAI,SAAA6B,GAEzC,MAAO,CACL4C,SAAUd,EAAS9B,GAAQ0B,KAC3BmB,OAAQ,kBAAM,eAACC,EAAA,EAAIC,KAAL,WACZ,cAAChC,EAAA,EAAD,CACEC,UAAQ,EACR1E,OAAO,eACPC,QAAQ,+BAEV,cAAC,EAAD,CAAayD,OAAQA,IACrB,cAAC,EAAD,IACA,cAAC7D,EAAA,EAAD,CAAQoD,MAAM,MAAMnD,KAAK,SAASgB,QAAS,SAAA8F,GAAK,OAAId,EAAmBc,EAAOlD,IAA9E,yBACA,cAAC7D,EAAA,EAAD,CAAQoD,MAAM,SAASnD,KAAK,SAA5B,sBAT2B0F,EAAS9B,GAAQ0B,WAe5CyB,EAAS,CAAIR,GAAJ,mBAAgBK,IAE/B,OACE,cAACI,EAAA,EAAKC,OAAN,CAAapG,MAAO,GAApB,SACE,cAAC,IAAD,sDAAuB8E,GAAvB,IAAgC/D,kBA3DV,SAACnB,EAAD,GAAyB,IAAnBC,EAAkB,EAAlBA,KAAMwG,EAAY,EAAZA,MACpCvB,EAAQwB,SAASzG,EAAMwG,OA0DrB,aACE,cAACjD,EAAYmD,SAAb,CAAsBF,MAAO,CAAEhD,UAASC,aAAYuB,WAAUtB,eAA9D,SACE,cAACzB,EAAA,EAAD,CAAM0E,UAAU,yBACdC,OAAO,OACPC,OAAQ,wBAFV,SAIE,cAACb,EAAA,EAAD,CAAKc,KAAM,CAAEzE,OAAO,EAAM0E,UAAU,EAAMC,SAAS,GACjDC,MAAOZ,EACPa,YAAa9B,EACb+B,YApDY,SAACpH,EAAD,GAAyB,IAAnBmH,EAAkB,EAAlBA,YAC5B7B,EAAmB6B,gBCsCRlE,EAxEK,CAEhB,KAAQ,CACJzB,MAAO,CACH,KAAQ,OACR,KAAQ,OACR,MAAS,OACT,YAAe,gBACf,aAAgB,IAEpBC,WAAY,CACR4F,UAAU,IAGlB,OAAU,CACN7F,MAAO,CACH,KAAQ,SACR,KAAQ,SACR,MAAS,SACT,YAAe,kBACf,aAAgB,OAChB,QAAW,CACP,CACI,IAAO,IACP,KAAQ,OACR,MAAS,QAEb,CACI,IAAO,IACP,KAAQ,SACR,MAAS,UAEb,CACI,IAAO,IACP,KAAQ,QACR,MAAS,WAIrBC,WAAY,CACR4F,UAAU,IAGlB,IAAO,CACH7F,MAAO,CACH,KAAQ,SACR,KAAQ,MACR,MAAS,MACT,YAAe,eACf,IAAO,EACP,aAAgB,GAGpBC,WAAY,CACR4F,UAAU,EACVC,eAAe,IAGvB,WAAc,CACV9F,MAAO,CACH,KAAQ,OACR,KAAQ,aACR,MAAS,cACT,YAAe,uBACf,aAAgB,IAEpBC,WAAY,CACR4F,UAAU,KCkBPjE,EArFE,CACb,KAAQ,CACJ5B,MAAO,CACH,KAAQ,OACR,KAAQ,OACR,MAAS,OACT,YAAe,iBAGnBC,WAAY,CACR,UAAY,IAGpB,gBAAmB,CACfD,MAAO,CACH,KAAQ,OACR,KAAQ,kBACR,MAAS,mBACT,YAAe,6BAGnBC,WAAY,CACR,UAAY,IAGpB,MAAS,CACLD,MAAO,CACH,KAAQ,OACR,KAAQ,QACR,MAAS,QACT,YAAe,kBAEnBC,WAAY,CACR,UAAY,EACZ,eAAiB,IAGzB,KAAQ,CACJD,MAAO,CACH,KAAQ,SACR,KAAQ,OACR,MAAS,OACT,YAAe,gBACf,QAAW,CACP,CACI,IAAO,IACP,KAAQ,OACR,MAAS,OAEb,CACI,IAAO,IACP,KAAQ,OACR,MAAS,SAIrBC,WAAY,CACR,UAAY,IAGpB,OAAU,CACND,MAAO,CACH,KAAQ,OACR,KAAQ,SACR,MAAS,SACT,YAAe,mBAEnBC,WAAY,CACR,UAAY,IAGpB,WAAc,CACVD,MAAO,CACH,KAAQ,OACR,KAAQ,aACR,MAAS,aACT,YAAe,uBAEnBC,WAAY,CACR,UAAY,KCvEXsB,EAAUgC,0BAoCRwC,MA9Bf,WAKE,MAA8C3H,mBAAS,IAAvD,mBAAO4H,EAAP,KAAwBC,EAAxB,KAEA,EAAgC7H,mBAAS,CAAEK,KAAM,UAAWsB,MAAO,OAAnE,mBAAOmG,EAAP,KAAiBC,EAAjB,KACA,EAAgC/H,mBAAS,CACvCoD,QAAS,CACPC,cACAG,cAHJ,mBAAOP,EAAP,KAAiB+E,EAAjB,KAQA,OACE,cAAC7E,EAAQ4D,SAAT,CAAkBF,MAAO,CAAE5D,WAAU+E,cAAaJ,kBAAiBC,qBAAoBC,WAAUC,eAAjG,SACE,eAACpB,EAAA,EAAD,CAAMsB,QAAS,EAAGC,SAAO,EAAzB,UACE,cAACvB,EAAA,EAAKwB,IAAN,UACE,cAAC,EAAD,MAEF,cAACxB,EAAA,EAAKwB,IAAN,UACE,cAAC,EAAD,YCzBKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASzC,OACP,cAAC,IAAM0C,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d6d6830b.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Button, Modal } from 'semantic-ui-react'\r\n\r\nfunction SimpleModal() {\r\n    return (\r\n        <Modal\r\n            trigger={<Button type=\"button\" icon=\"info\" />}\r\n            header='Reminder!'\r\n            content='Patient report'\r\n        />\r\n    )\r\n}\r\n\r\nexport default SimpleModal\r\n","import React, {  useState } from 'react';\r\nimport { Input, Menu } from 'semantic-ui-react'\r\nimport Modal from \"./Modal\";\r\n\r\nconst NavBar = () => {\r\n    const [activeItem, setActiveItem] = useState('home')\r\n    const handleItemClick = (e, { name }) => setActiveItem(name);\r\n    return (\r\n        <Menu style={{ width: \"100%\" }}>\r\n            <Menu.Item\r\n                name='home'\r\n                active={activeItem === 'home'}\r\n                onClick={handleItemClick}\r\n            />\r\n            <Menu.Item\r\n                name='login'\r\n                active={activeItem === 'login'}\r\n                onClick={handleItemClick}\r\n            />\r\n\r\n            <Menu.Menu position='right'>\r\n                <Menu.Item>\r\n                    <Input icon='search' placeholder='Search...' />\r\n                </Menu.Item>\r\n                <Menu.Item>\r\n                    <Modal />\r\n                </Menu.Item>\r\n            </Menu.Menu>\r\n\r\n        </Menu>\r\n    )\r\n}\r\nexport default NavBar;","import React, { useState, useContext } from \"react\";\r\nimport { Icon, Button, Form, Message, Modal, Input, Select } from \"semantic-ui-react\";\r\nimport { Context } from \"../App\";\r\nimport { useFormContext } from \"react-hook-form\";\r\nimport { TestContext } from \"./Main\";\r\nimport _ from \"lodash\";\r\n\r\nconst useGetFields = (fieldSpec, modifyName) => {\r\n  const { getValues, register, formState: { errors }, handleInputChange } = useFormContext();\r\n\r\n  const getFieldProps = (props) => {\r\n    let fieldProps = { ...props, name: modifyName(props.name) };\r\n    fieldProps.id = fieldProps.name;\r\n    fieldProps.defaultValue = getValues(fieldProps.name) || props.defaultValue || \"\";\r\n    return fieldProps;\r\n  }\r\n\r\n\r\n  return Object.values(fieldSpec).map(({ props, validation }, index) => {\r\n    let fieldProps = getFieldProps(props);\r\n    const errorMessage = _.get(errors, fieldProps.name)?.message;\r\n    return (\r\n      <Form.Group key={index.toString()} widths=\"equal\">\r\n        <Form.Field\r\n          fluid\r\n          control={getControl(fieldProps.type)}\r\n          {...register(fieldProps.name, { ...validation })}\r\n          {...fieldProps}\r\n          onChange={handleInputChange}\r\n        />\r\n        {errorMessage &&\r\n          <p style={ {color:\"red\"}}>{errorMessage}</p>\r\n        }\r\n      </Form.Group>\r\n    );\r\n  })\r\n}\r\n\r\n\r\n\r\n\r\nconst PatientDetails = () => {\r\n  const { appState } = useContext(Context);\r\n  return useGetFields(\r\n    appState.patient.detailsSpec,\r\n    name => `patient.${name}`\r\n  )\r\n\r\n}\r\nexport default PatientDetails;\r\n\r\n\r\nexport const TestDetails = ({ testID }) => {\r\n  const { appState } = useContext(Context);\r\n  return useGetFields(appState.patient.testSpec, name => `patient.tests.${testID}.${name}`)\r\n\r\n\r\n}\r\n\r\n\r\nexport const AddTestButton = () => {\r\n  const { setError, unregister, getValues } = useFormContext();\r\n  const { counter, setCounter, setTestList } = useContext(TestContext)\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const testID = `test${counter}`;\r\n\r\n\r\n  const handleTestAdditionAccept = () => {\r\n\r\n    setTestList(state => {\r\n\r\n      let newlyAddedTestName = getValues(`patient.tests.${testID}.name`);\r\n      if (Object.values(getValues(\"patient.tests\")).map(ele => ele.name).slice(0, -1).includes(newlyAddedTestName)) {\r\n\r\n        setError(\r\n          `patient.tests.${testID}.name`,\r\n          { type: \"TEST_ALREADY_EXISTS\", message: \"Test with this name already exists\" },\r\n          { shouldFocus: true }\r\n        )\r\n\r\n        return state;\r\n      }\r\n      let newState = {\r\n        ...state, [testID]: { text: getValues(`patient.tests.${testID}.name`) }\r\n      }\r\n\r\n\r\n      setCounter(state => state + 1);\r\n      setOpen(false);\r\n      return newState;\r\n\r\n    })\r\n\r\n  }\r\n\r\n\r\n  const handleTestAdditionCancel = () => {\r\n    unregister(`patient.tests.${testID}`);\r\n    setOpen(false);\r\n  }\r\n\r\n\r\n  return <Modal onOpen={() => setOpen(true)}\r\n    open={open}\r\n    trigger={\r\n      <Button positive type=\"button\">\r\n        Add Test\r\n        <span>\r\n          <Icon name=\"plus circle\" />\r\n        </span>\r\n      </Button>\r\n    }>\r\n    <Modal.Header>\r\n      <Message\r\n        attached\r\n        header=\"Add a test\"\r\n        content=\"Fill out the test details.\"\r\n      />\r\n    </Modal.Header>\r\n    <Modal.Content>\r\n      <TestDetails testID={testID} />\r\n    </Modal.Content>\r\n    <Modal.Actions>\r\n      <Button\r\n        key={0}\r\n        color=\"green\"\r\n        type=\"button\"\r\n        onClick={handleTestAdditionAccept}\r\n      >\r\n        OK\r\n      </Button>\r\n      <Button\r\n        key={1}\r\n        color=\"black\"\r\n        type=\"button\"\r\n        onClick={handleTestAdditionCancel}\r\n      >\r\n        Cancel\r\n      </Button>\r\n    </Modal.Actions>\r\n  </Modal>\r\n\r\n\r\n}\r\n\r\n\r\nconst getControl = (type) => {\r\n  switch (type) {\r\n    case \"select\":\r\n      return Select;\r\n    default:\r\n      return Input;\r\n  }\r\n};\r\n","import PatientDetails, { TestDetails } from \"./FormComponents\";\r\nimport { Grid } from 'semantic-ui-react';\r\nimport { useState, createContext } from 'react';\r\nimport { Tab } from 'semantic-ui-react'\r\nimport { Button, Form, Message } from \"semantic-ui-react\";\r\nimport { useForm, FormProvider } from \"react-hook-form\";\r\nimport { AddTestButton } from \"./FormComponents\";\r\n\r\n\r\nexport const TestContext = createContext();\r\n\r\nconst Main = () => {\r\n  const [testList, setTestList] = useState({});\r\n  const methods = useForm({ shouldUnregister: false });\r\n  const [counter, setCounter] = useState(0);\r\n  const [currentTabIndex, setCurrentTabIndex] = useState(0);\r\n\r\n  const handleInputChange = (e, { name, value }) => {\r\n    methods.setValue(name, value);\r\n  };\r\n\r\n  const handleTestDeletion = (e, testID) => {\r\n    const filterDict = (dict, filterFunc) => Object.fromEntries(\r\n      Object.entries(dict).filter(filterFunc)\r\n    )\r\n\r\n    setTestList(state => filterDict(state, ([key, val]) => key !== testID))\r\n\r\n    methods.unregister(`patient.tests.${testID}`)\r\n    setCurrentTabIndex(0);\r\n\r\n  }\r\n\r\n  const handleTabChange = (e, { activeIndex }) => {\r\n    setCurrentTabIndex(activeIndex)\r\n  }\r\n\r\n  const details = {\r\n    menuItem: 'Patient Profile',\r\n    render: () => <Tab.Pane key={ \"Patient Profile\"}>\r\n      <Message\r\n        attached\r\n        header=\"Patient Details\"\r\n        content=\"Fill out the patient details.\"\r\n\r\n      />\r\n      <PatientDetails />\r\n      <AddTestButton />\r\n      <Button color=\"violet\" type=\"submit\">Submit</Button>\r\n    </Tab.Pane>\r\n  }\r\n\r\n\r\n  const allTests = Object.keys(testList).map(testID => {\r\n\r\n    return {\r\n      menuItem: testList[testID].text,\r\n      render: () => <Tab.Pane key={testList[testID].text}>\r\n        <Message\r\n          attached\r\n          header=\"Test Details\"\r\n          content=\"Fill out the test details.\"\r\n        />\r\n        <TestDetails testID={testID} />\r\n        <AddTestButton />\r\n        <Button color=\"red\" type=\"button\" onClick={event => handleTestDeletion(event, testID)}>Remove test</Button>\r\n        <Button color=\"violet\" type=\"submit\" >Submit</Button>\r\n      </Tab.Pane>\r\n    }\r\n  })\r\n\r\n\r\n  const menuItems = [details, ...allTests]\r\n\r\n  return (\r\n    <Grid.Column width={16}>\r\n      <FormProvider {...{ ...methods, handleInputChange }}  >\r\n        <TestContext.Provider value={{ counter, setCounter, testList, setTestList }} >\r\n          <Form className=\"attached fluid segment\"\r\n            method=\"post\"\r\n            action={\"http://localhost:8000\"}\r\n          >\r\n            <Tab menu={{ fluid: true, vertical: true, tabular: true }}\r\n              panes={menuItems}\r\n              activeIndex={currentTabIndex}\r\n              onTabChange={handleTabChange} />\r\n          </Form>\r\n        </TestContext.Provider>\r\n      </FormProvider>\r\n    </Grid.Column>)\r\n}\r\n\r\nexport default Main;\r\n\r\n\r\n\r\n\r\n","const detailsSpec = {\r\n\r\n    \"name\": {\r\n        props: {\r\n            \"type\": \"text\",\r\n            \"name\": \"name\",\r\n            \"label\": \"Name\",\r\n            \"placeholder\": \"Enter name...\",\r\n            \"defaultValue\": \"\"\r\n        },\r\n        validation: {\r\n            required: true\r\n        },\r\n    },\r\n    \"gender\": {\r\n        props: {\r\n            \"type\": \"select\",\r\n            \"name\": \"gender\",\r\n            \"label\": \"Gender\",\r\n            \"placeholder\": \"Enter gender...\",\r\n            \"defaultValue\": \"male\",\r\n            \"options\": [\r\n                {\r\n                    \"key\": \"m\",\r\n                    \"text\": \"Male\",\r\n                    \"value\": \"male\"\r\n                },\r\n                {\r\n                    \"key\": \"f\",\r\n                    \"text\": \"Female\",\r\n                    \"value\": \"female\"\r\n                },\r\n                {\r\n                    \"key\": \"o\",\r\n                    \"text\": \"Other\",\r\n                    \"value\": \"other\"\r\n                }\r\n            ]\r\n        },\r\n        validation: {\r\n            required: true\r\n        },\r\n    },\r\n    \"age\": {\r\n        props: {\r\n            \"type\": \"number\",\r\n            \"name\": \"age\",\r\n            \"label\": \"Age\",\r\n            \"placeholder\": \"Enter age...\",\r\n            \"min\": 0,\r\n            \"defaultValue\": 0\r\n\r\n        },\r\n        validation: {\r\n            required: true,\r\n            valueAsNumber: true\r\n        },\r\n    },\r\n    \"referredBy\": {\r\n        props: {\r\n            \"type\": \"text\",\r\n            \"name\": \"referredBy\",\r\n            \"label\": \"Referred By\",\r\n            \"placeholder\": \"Enter referred by...\",\r\n            \"defaultValue\": \"\"\r\n        },\r\n        validation: {\r\n            required: true\r\n        },\r\n    }\r\n}\r\n\r\nexport default detailsSpec;","const testSpec = {\r\n    \"name\": {\r\n        props: {\r\n            \"type\": \"text\",\r\n            \"name\": \"name\",\r\n            \"label\": \"Name\",\r\n            \"placeholder\": \"Enter name...\",\r\n\r\n        },\r\n        validation: {\r\n            \"required\": true\r\n        }\r\n    },\r\n    \"observationTime\": {\r\n        props: {\r\n            \"type\": \"time\",\r\n            \"name\": \"observationTime\",\r\n            \"label\": \"Observation Time\",\r\n            \"placeholder\": \"Enter observation time...\",\r\n\r\n        },\r\n        validation: {\r\n            \"required\": true\r\n        }\r\n    },\r\n    \"value\": {\r\n        props: {\r\n            \"type\": \"text\",\r\n            \"name\": \"value\",\r\n            \"label\": \"Value\",\r\n            \"placeholder\": \"Enter value...\",\r\n        },\r\n        validation: {\r\n            \"required\": true,\r\n            \"valueAsNumber\": true\r\n        }\r\n    },\r\n    \"unit\": {\r\n        props: {\r\n            \"type\": \"select\",\r\n            \"name\": \"unit\",\r\n            \"label\": \"Unit\",\r\n            \"placeholder\": \"Enter unit...\",\r\n            \"options\": [\r\n                {\r\n                    \"key\": \"0\",\r\n                    \"text\": \"mg/L\",\r\n                    \"value\": \"mgL\"\r\n                },\r\n                {\r\n                    \"key\": \"1\",\r\n                    \"text\": \"kg/L\",\r\n                    \"value\": \"kgL\"\r\n                }\r\n            ]\r\n        },\r\n        validation: {\r\n            \"required\": true\r\n        }\r\n    },\r\n    \"method\": {\r\n        props: {\r\n            \"type\": \"text\",\r\n            \"name\": \"method\",\r\n            \"label\": \"Method\",\r\n            \"placeholder\": \"Enter method...\",\r\n        },\r\n        validation: {\r\n            \"required\": true\r\n        }\r\n    },\r\n    \"impression\": {\r\n        props: {\r\n            \"type\": \"text\",\r\n            \"name\": \"impression\",\r\n            \"label\": \"Impression\",\r\n            \"placeholder\": \"Enter impression...\",\r\n        },\r\n        validation: {\r\n            \"required\": true\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default testSpec;","import \"semantic-ui-css/semantic.min.css\";\r\nimport \"./App.css\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport Main from \"./components/Main\";\r\nimport { createContext, useState } from \"react\";\r\nimport { Grid } from 'semantic-ui-react';\r\nimport detailsSpec from \"./patientDetails\"\r\nimport testSpec from \"./patientTests\";\r\nexport const Context = createContext();\r\n\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n\r\n\r\n  const [patientPackages, setPatientPackages] = useState([]);\r\n\r\n  const [formview, setFormView] = useState({ name: \"profile\", index: null });\r\n  const [appState, setAppState] = useState({\r\n    patient: {\r\n      detailsSpec,\r\n      testSpec\r\n    },\r\n  }\r\n  );\r\n\r\n  return (\r\n    <Context.Provider value={{ appState, setAppState, patientPackages, setPatientPackages, formview, setFormView }}>\r\n      <Grid columns={2} divided>\r\n        <Grid.Row>\r\n          <NavBar />\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Main />\r\n        </Grid.Row>\r\n      </Grid>\r\n    </Context.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}