{"version":3,"sources":["components/Modal.js","components/NavBar.js","components/FormComponents/Utils.js","components/FormComponents/TestDetails.js","components/FormComponents/AddTestButton.js","components/FormComponents/PatientDetails.js","components/SideBar/ProfileMenu.js","components/SideBar/TestsMenu.js","components/Main.js","patientDetails.js","patientTests.js","App.js","reportWebVitals.js","index.js"],"names":["SimpleModal","Modal","trigger","Button","type","icon","header","content","NavBar","useState","activeItem","setActiveItem","handleItemClick","e","name","Menu","style","width","Item","active","onClick","position","Input","placeholder","GetFields","fieldSpec","modifyName","handleInputChange","value","setValue","useFormContext","getValues","register","errors","formState","Object","values","map","index","props","validation","fieldProps","id","defaultValue","getFieldProps","errorMessage","_","get","message","Form","Group","widths","Field","fluid","control","getControl","onChange","color","toString","Select","TestDetails","testID","appState","useContext","Context","patient","testSpec","AddTestButton","setError","unregister","TestContext","counter","setCounter","setTestList","open","setOpen","onOpen","positive","Icon","Header","Message","attached","Content","Actions","state","newlyAddedTestName","ele","slice","includes","shouldFocus","newState","text","PatientDetails","detailsSpec","getProfileMenu","menuItem","as","disabled","render","Tab","Pane","SearchInput","SearchContext","searchText","setSearchText","getTestMenu","testList","handleTestDeletion","Fragment","keys","filter","toLowerCase","event","getTestList","createContext","TabContext","Main","methods","useForm","shouldUnregister","currentTabIndex","setCurrentTabIndex","menuItems","dict","filterFunc","key","fromEntries","entries","Grid","Column","Provider","className","method","action","menu","vertical","tabular","panes","activeIndex","onTabChange","required","valueAsNumber","App","patientPackages","setPatientPackages","formview","setFormView","setAppState","columns","divided","Row","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e0abb22.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Button, Modal } from 'semantic-ui-react'\r\n\r\nfunction SimpleModal() {\r\n    return (\r\n        <Modal\r\n            trigger={<Button type=\"button\" icon=\"info\" />}\r\n            header='Reminder!'\r\n            content='Patient report'\r\n        />\r\n    )\r\n}\r\n\r\nexport default SimpleModal\r\n","import React, {  useState } from 'react';\r\nimport { Input, Menu } from 'semantic-ui-react'\r\nimport Modal from \"./Modal\";\r\n\r\nconst NavBar = () => {\r\n    const [activeItem, setActiveItem] = useState('home')\r\n    const handleItemClick = (e, { name }) => setActiveItem(name);\r\n    return (\r\n        <Menu style={{ width: \"100%\" }}>\r\n            <Menu.Item\r\n                name='home'\r\n                active={activeItem === 'home'}\r\n                onClick={handleItemClick}\r\n            />\r\n            <Menu.Item\r\n                name='login'\r\n                active={activeItem === 'login'}\r\n                onClick={handleItemClick}\r\n            />\r\n\r\n            <Menu.Menu position='right'>\r\n                <Menu.Item>\r\n                    <Input icon='search' placeholder='Search...' />\r\n                </Menu.Item>\r\n                <Menu.Item>\r\n                    <Modal />\r\n                </Menu.Item>\r\n            </Menu.Menu>\r\n\r\n        </Menu>\r\n    )\r\n}\r\nexport default NavBar;","import React from \"react\";\r\nimport { Form, Input, Select } from \"semantic-ui-react\";\r\nimport { useFormContext } from \"react-hook-form\";\r\nimport _ from \"lodash\";\r\n\r\n\r\n\r\nexport const GetFields = (fieldSpec, modifyName) => {\r\n\r\n  const handleInputChange = (e, { name, value }) => {\r\n    setValue(name, value);\r\n  };\r\n\r\n  const { setValue, getValues, register, formState: { errors } } = useFormContext();\r\n\r\n  const getFieldProps = (props) => {\r\n    let fieldProps = { ...props, name: modifyName(props.name) };\r\n    fieldProps.id = fieldProps.name;\r\n    fieldProps.defaultValue = getValues(fieldProps.name) || props.defaultValue || \"\";\r\n    return fieldProps;\r\n  }\r\n\r\n\r\n  return Object.values(fieldSpec).map(({ props, validation }, index) => {\r\n    let fieldProps = getFieldProps(props);\r\n    const errorMessage = _.get(errors, fieldProps.name)?.message;\r\n    return (\r\n      <Form.Group key={index.toString()} widths=\"equal\">\r\n        <Form.Field\r\n          fluid\r\n          control={getControl(fieldProps.type)}\r\n          {...register(fieldProps.name, { ...validation })}\r\n          {...fieldProps}\r\n          onChange={handleInputChange}\r\n        />\r\n        {errorMessage &&\r\n          <p style={{ color: \"red\" }}>{errorMessage}</p>\r\n        }\r\n      </Form.Group>\r\n    );\r\n  })\r\n}\r\n\r\n\r\n\r\n\r\nexport const getControl = (type) => {\r\n  switch (type) {\r\n    case \"select\":\r\n      return Select;\r\n    default:\r\n      return Input;\r\n  }\r\n};\r\n","import { useContext } from 'react';\r\nimport { GetFields } from './Utils'\r\nimport { Context } from \"../../App\"\r\n\r\nexport const TestDetails = ({ testID }) => {\r\n    const { appState } = useContext(Context);\r\n    return GetFields(\r\n        appState.patient.testSpec,\r\n        name => `patient.tests.${testID}.${name}`)\r\n}\r\n\r\nexport default TestDetails;","import { useContext, useState } from \"react\";\r\nimport { Button, Modal, Icon, Message } from \"semantic-ui-react\";\r\nimport { useFormContext } from \"react-hook-form\";\r\nimport { TestContext } from \"../Main\"\r\nimport TestDetails from \"./TestDetails\"\r\n\r\nexport const AddTestButton = () => {\r\n\r\n    const { setError, unregister, getValues } = useFormContext();\r\n    const { counter, setCounter, setTestList } = useContext(TestContext)\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const testID = `test${counter}`;\r\n\r\n\r\n    const handleTestAdditionAccept = () => {\r\n\r\n        setTestList(state => {\r\n\r\n            let newlyAddedTestName = getValues(`patient.tests.${testID}.name`);\r\n            if (Object.values(getValues(\"patient.tests\")).map(ele => ele.name).slice(0, -1).includes(newlyAddedTestName)) {\r\n\r\n                setError(\r\n                    `patient.tests.${testID}.name`,\r\n                    { type: \"TEST_ALREADY_EXISTS\", message: \"Test with this name already exists\" },\r\n                    { shouldFocus: true }\r\n                )\r\n\r\n                return state;\r\n            }\r\n            let newState = {\r\n                ...state, [testID]: { text: getValues(`patient.tests.${testID}.name`) , index: counter }\r\n            }\r\n            setCounter(state => state + 1);\r\n            setOpen(false);\r\n            return newState;\r\n        })\r\n    }\r\n\r\n\r\n    const handleTestAdditionCancel = () => {\r\n        unregister(`patient.tests.${testID}`);\r\n        setOpen(false);\r\n    }\r\n    return <Modal onOpen={() => setOpen(true)}\r\n        open={open}\r\n        trigger={\r\n            <Button positive type=\"button\">\r\n                Add Test\r\n                <span>\r\n                    <Icon name=\"plus circle\" />\r\n                </span>\r\n            </Button>\r\n        }>\r\n        <Modal.Header>\r\n            <Message\r\n                attached\r\n                header=\"Add a test\"\r\n                content=\"Fill out the test details.\"\r\n            />\r\n        </Modal.Header>\r\n        <Modal.Content>\r\n            <TestDetails testID={testID} />\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n            <Button\r\n                key={0}\r\n                color=\"green\"\r\n                type=\"button\"\r\n                onClick={handleTestAdditionAccept}\r\n            >\r\n                OK\r\n            </Button>\r\n            <Button\r\n                key={1}\r\n                color=\"black\"\r\n                type=\"button\"\r\n                onClick={handleTestAdditionCancel}\r\n            >\r\n                Cancel\r\n            </Button>\r\n        </Modal.Actions>\r\n    </Modal>\r\n\r\n\r\n}\r\n\r\nexport default AddTestButton;","import { useContext } from 'react'\r\nimport { Context } from \"../../App\"\r\nimport { GetFields } from \"./Utils\"\r\n\r\nconst PatientDetails = () => {\r\n    const { appState } = useContext(Context);\r\n    return GetFields(\r\n        appState.patient.detailsSpec,\r\n        name => `patient.${name}`\r\n    )\r\n\r\n}\r\nexport default PatientDetails;\r\n","import {\r\n    Header,\r\n    Button,\r\n    Message,\r\n    Tab\r\n} from \"semantic-ui-react\";\r\nimport { PatientDetails, AddTestButton } from \"../FormComponents\";\r\n\r\n\r\nconst getProfileHeader = () => {\r\n    return {\r\n        menuItem: {\r\n            header: true,\r\n            content: <Header as=\"h3\">Patient Profile</Header>,\r\n            active: false,\r\n            disabled: true,\r\n        },\r\n        render: () => {\r\n            <Tab.Pane key=\"Patient Profile Heading\"></Tab.Pane>;\r\n        },\r\n    }\r\n}\r\n\r\n\r\nconst getProfileList = () => {\r\n    return {\r\n        menuItem: { content: \"Details\", color: \"violet\" },\r\n        render: () => (\r\n            <Tab.Pane key={\"Patient Profile\"}>\r\n                <Message\r\n                    attached\r\n                    header=\"Patient Details\"\r\n                    content=\"Fill out the patient details.\"\r\n                />\r\n                <PatientDetails />\r\n                <AddTestButton />\r\n                <Button color=\"violet\" type=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </Tab.Pane>\r\n        ),\r\n    }\r\n};\r\nconst getProfileMenu = () => {\r\n    return [getProfileHeader(), getProfileList()]\r\n}\r\n\r\n\r\n\r\n\r\nexport default getProfileMenu;\r\n","import React, { useContext} from \"react\";\r\nimport { Input, Header, Button, Message, Tab } from \"semantic-ui-react\";\r\nimport TestDetails from \"../FormComponents/TestDetails\";\r\nimport AddTestButton from \"../FormComponents/AddTestButton\";\r\nimport {SearchContext} from \"../Main\";\r\n\r\nconst SearchInput = () => {\r\n    const { searchText, setSearchText } = useContext(SearchContext);\r\n    return (\r\n        <Input\r\n            icon=\"search\"\r\n            placeholder=\"Search...\"\r\n            value={searchText}\r\n            onChange={(e, { value }) => {\r\n                setSearchText(value) }}\r\n        />\r\n    );\r\n};\r\nconst getTestHeader = () => {\r\n    return {\r\n        menuItem: {\r\n            header: true,\r\n            content: (\r\n                <React.Fragment>\r\n                    <Header as=\"h3\">Tests</Header>\r\n                    <SearchInput />\r\n                </React.Fragment>\r\n            ),\r\n            active: false,\r\n            disabled: true,\r\n        },\r\n        render: () => <Tab.Pane key={\"Tests Heading\"}></Tab.Pane>,\r\n    };\r\n};\r\n\r\nconst getTestList = (testList,searchText, handleTestDeletion) => {\r\n    const checkQueryinSearchText = (testID) => {\r\n        return (!searchText) || testList[testID].text.toLowerCase().includes(searchText.toLowerCase())\r\n    }\r\n    return Object.keys(testList)\r\n        .filter(checkQueryinSearchText)\r\n        .slice(0, 10)\r\n        .map((testID) => {\r\n            return {\r\n                menuItem: { content: testList[testID].text, color: \"violet\" },\r\n\r\n                render: () => (\r\n                    <Tab.Pane key={testID}>\r\n                        <Message\r\n                            attached\r\n                            header=\"Test Details\"\r\n                            content=\"Fill out the test details.\"\r\n                        />\r\n                        <TestDetails testID={testID} />\r\n                        <AddTestButton />\r\n                        <Button\r\n                            color=\"red\"\r\n                            type=\"button\"\r\n                            onClick={(event) => handleTestDeletion(event, testID)}\r\n                        >\r\n                            Remove test\r\n                        </Button>\r\n                        <Button color=\"violet\" type=\"submit\">\r\n                            Submit\r\n                        </Button>\r\n                    </Tab.Pane>\r\n                ),\r\n            };\r\n        });\r\n};\r\n\r\nconst getTestMenu = (testList,searchText, handleTestDeletion) => {\r\n    return [getTestHeader(), ...getTestList(testList,searchText, handleTestDeletion)];\r\n};\r\n\r\nexport default getTestMenu;\r\n","import { Grid } from \"semantic-ui-react\";\r\nimport { useState, createContext } from \"react\";\r\nimport { Form, Tab, Input } from \"semantic-ui-react\";\r\nimport { useForm, FormProvider } from \"react-hook-form\";\r\nimport { getProfileMenu, getTestMenu } from \"./SideBar\"\r\n\r\nexport const TestContext = createContext({});\r\nexport const TabContext = createContext({});\r\nexport const SearchContext = createContext({});\r\n\r\nconst Main = () => {\r\n  const [testList, setTestList] = useState({});\r\n  const [counter, setCounter] = useState(0);\r\n  const [searchText, setSearchText] = useState(\"\")\r\n\r\n  const methods = useForm({ shouldUnregister: false });\r\n\r\n  const [currentTabIndex, setCurrentTabIndex] = useState(1);\r\n\r\n\r\n\r\n\r\n\r\n  const handleTestDeletion = (e, testID) => {\r\n    const filterDict = (dict, filterFunc) =>\r\n      Object.fromEntries(Object.entries(dict).filter(filterFunc));\r\n\r\n    setTestList((state) => filterDict(state, ([key, val]) => key !== testID));\r\n\r\n    methods.unregister(`patient.tests.${testID}`);\r\n    setCurrentTabIndex(0);\r\n  };\r\n\r\n  const menuItems = [...getProfileMenu(), ...getTestMenu(testList, searchText, handleTestDeletion)];\r\n\r\n\r\n  return (\r\n    <Grid.Column width={16}>\r\n      <FormProvider {...{ ...methods }}>\r\n        <TestContext.Provider\r\n          value={{ counter, setCounter, testList, setTestList }}\r\n        >\r\n          <TabContext.Provider value={{ currentTabIndex, setCurrentTabIndex }}>\r\n            <SearchContext.Provider value={{ searchText, setSearchText }}>\r\n              <Form\r\n                className=\"attached fluid segment\"\r\n                method=\"post\"\r\n                action={\"http://localhost:8000\"}\r\n              >\r\n                <Tab\r\n                  menu={{ fluid: true, vertical: true, tabular: true }}\r\n                  panes={menuItems}\r\n                  activeIndex={currentTabIndex}\r\n                  onTabChange={(e, { activeIndex }) => {\r\n                    setCurrentTabIndex(activeIndex);\r\n                  }}\r\n                />\r\n              </Form>\r\n            </SearchContext.Provider>\r\n          </TabContext.Provider>\r\n        </TestContext.Provider>\r\n      </FormProvider>\r\n    </Grid.Column>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","const detailsSpec = {\r\n\r\n    \"name\": {\r\n        props: {\r\n            \"type\": \"text\",\r\n            \"name\": \"name\",\r\n            \"label\": \"Name\",\r\n            \"placeholder\": \"Enter name...\",\r\n            \"defaultValue\": \"\"\r\n        },\r\n        validation: {\r\n            required: true\r\n        },\r\n    },\r\n    \"gender\": {\r\n        props: {\r\n            \"type\": \"select\",\r\n            \"name\": \"gender\",\r\n            \"label\": \"Gender\",\r\n            \"placeholder\": \"Enter gender...\",\r\n            \"defaultValue\": \"male\",\r\n            \"options\": [\r\n                {\r\n                    \"key\": \"m\",\r\n                    \"text\": \"Male\",\r\n                    \"value\": \"male\"\r\n                },\r\n                {\r\n                    \"key\": \"f\",\r\n                    \"text\": \"Female\",\r\n                    \"value\": \"female\"\r\n                },\r\n                {\r\n                    \"key\": \"o\",\r\n                    \"text\": \"Other\",\r\n                    \"value\": \"other\"\r\n                }\r\n            ]\r\n        },\r\n        validation: {\r\n            required: true\r\n        },\r\n    },\r\n    \"age\": {\r\n        props: {\r\n            \"type\": \"number\",\r\n            \"name\": \"age\",\r\n            \"label\": \"Age\",\r\n            \"placeholder\": \"Enter age...\",\r\n            \"min\": 0,\r\n            \"defaultValue\": 0\r\n\r\n        },\r\n        validation: {\r\n            required: true,\r\n            valueAsNumber: true\r\n        },\r\n    },\r\n    \"referredBy\": {\r\n        props: {\r\n            \"type\": \"text\",\r\n            \"name\": \"referredBy\",\r\n            \"label\": \"Referred By\",\r\n            \"placeholder\": \"Enter referred by...\",\r\n            \"defaultValue\": \"\"\r\n        },\r\n        validation: {\r\n            required: true\r\n        },\r\n    }\r\n}\r\n\r\nexport default detailsSpec;","const testSpec = {\r\n    \"name\": {\r\n        props: {\r\n            \"type\": \"text\",\r\n            \"name\": \"name\",\r\n            \"label\": \"Name\",\r\n            \"placeholder\": \"Enter name...\",\r\n\r\n        },\r\n        validation: {\r\n            \"required\": true\r\n        }\r\n    },\r\n    \"observationTime\": {\r\n        props: {\r\n            \"type\": \"time\",\r\n            \"name\": \"observationTime\",\r\n            \"label\": \"Observation Time\",\r\n            \"placeholder\": \"Enter observation time...\",\r\n\r\n        },\r\n        validation: {\r\n            \"required\": true\r\n        }\r\n    },\r\n    \"value\": {\r\n        props: {\r\n            \"type\": \"text\",\r\n            \"name\": \"value\",\r\n            \"label\": \"Value\",\r\n            \"placeholder\": \"Enter value...\",\r\n        },\r\n        validation: {\r\n            \"required\": true,\r\n            \"valueAsNumber\": true\r\n        }\r\n    },\r\n    \"unit\": {\r\n        props: {\r\n            \"type\": \"select\",\r\n            \"name\": \"unit\",\r\n            \"label\": \"Unit\",\r\n            \"placeholder\": \"Enter unit...\",\r\n            \"options\": [\r\n                {\r\n                    \"key\": \"0\",\r\n                    \"text\": \"mg/L\",\r\n                    \"value\": \"mgL\"\r\n                },\r\n                {\r\n                    \"key\": \"1\",\r\n                    \"text\": \"kg/L\",\r\n                    \"value\": \"kgL\"\r\n                }\r\n            ]\r\n        },\r\n        validation: {\r\n            \"required\": true\r\n        }\r\n    },\r\n    \"method\": {\r\n        props: {\r\n            \"type\": \"text\",\r\n            \"name\": \"method\",\r\n            \"label\": \"Method\",\r\n            \"placeholder\": \"Enter method...\",\r\n        },\r\n        validation: {\r\n            \"required\": true\r\n        }\r\n    },\r\n    \"impression\": {\r\n        props: {\r\n            \"type\": \"text\",\r\n            \"name\": \"impression\",\r\n            \"label\": \"Impression\",\r\n            \"placeholder\": \"Enter impression...\",\r\n        },\r\n        validation: {\r\n            \"required\": true\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default testSpec;","import \"semantic-ui-css/semantic.min.css\";\r\nimport \"./App.css\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport Main from \"./components/Main\";\r\nimport { createContext, useState } from \"react\";\r\nimport { Grid } from 'semantic-ui-react';\r\nimport detailsSpec from \"./patientDetails\"\r\nimport testSpec from \"./patientTests\";\r\nexport const Context = createContext();\r\n\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n\r\n\r\n  const [patientPackages, setPatientPackages] = useState([]);\r\n\r\n  const [formview, setFormView] = useState({ name: \"profile\", index: null });\r\n  const [appState, setAppState] = useState({\r\n    patient: {\r\n      detailsSpec,\r\n      testSpec\r\n    },\r\n  }\r\n  );\r\n\r\n  return (\r\n    <Context.Provider value={{ appState, setAppState, patientPackages, setPatientPackages, formview, setFormView }}>\r\n      <Grid columns={2} divided>\r\n        <Grid.Row>\r\n          <NavBar />\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Main />\r\n        </Grid.Row>\r\n      </Grid>\r\n    </Context.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}